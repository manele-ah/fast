// automatically generated by Xtext
grammar fr.ubo.fast.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://fr.ubo.fast" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


TimeSeriesFramework returns TimeSeriesFramework:
		platform=Platform
		data=Data
		'Tools' '{' clients+=VisualizationClient ';' (clients+=VisualizationClient ';')* '}' ';';

VisualizationClient returns VisualizationClient:
	MinMaxVisualizationClient;

Scale returns Scale:
	CalendarScale | FactorScale;

DataSource returns DataSource:
	Database | File;

Service returns Service:
	Database | WebServer | File;

Data returns Data:
	'Data' 
	'{'
		'Sensors' '{' sensorsData+=Sensor ';' (sensorsData+=Sensor ';')* '}' ';'
		'TimeSeries' '{' timeSeriesData+=TimeSeries ';' (timeSeriesData+=TimeSeries ';')* '}' ';'
	'}' ';';

Platform returns Platform:
	'HwArchitecture' 
	'{'
		'Computers' '{' computersPlatform+=Computer ';' (computersPlatform+=Computer ';')* '}' ';'
		'Networks' '{' networksPlatform+=Network ';' (networksPlatform+=Network ';')* '}' ';'
	'}' ';';

MinMaxVisualizationClient returns MinMaxVisualizationClient:
	'Tool' name=EString
	'('
		timeSeriesSelected=[TimeSeries|EString] 'on'
		clientComputer=[Computer|EString] ','
		chartWidth=EInt ','
		chartHeight=EInt ','
		axisFactor=EInt
	')'
	'{'
		userPolicy=UserPolicy ';'
		clientScale=Scale ';'
		'userTime' userTime=EDouble ';'
		'pingTime' pingTime=EDouble ';'
		'rawDataThreshold' rawDataThreshold=EDouble ';'
		'preComputedDataThreshold' preComputedDataThreshold=EDouble ';'
	'}';

TimeSeries returns TimeSeries:
	name=EString
	'('
		timeSeriesMeasuredVariable=[MeasuredVariable|EString]
	')'
	'{'
		'startTime' startTime=EString ';'
		'endTime' endTime=EString ';'
		'period' period=EDouble ';'
		'database' timeSeriesDataSource=[DataSource|EString] ';'
	'}';

Sensor returns Sensor:
	name=EString 'measures'
	'{'
		(sensorMetaData+=MetaData ';' (sensorMetaData+=MetaData ';')*)?
		sensorMeasuredVariables+=MeasuredVariable ';' (sensorMeasuredVariables+=MeasuredVariable ';')* 
	'}';

MeasuredVariable returns MeasuredVariable:
 	name=EString  'in' unit=MeasurementDataUnit
	('{' measuredVariableMetaData+=MetaData ';' (measuredVariableMetaData+=MetaData ';')* '}')?;

MetaData returns MetaData:
	'metadata' name=EString
	'('
		value=EString
	')';

Database returns Database:
	name=EString
	'('
		dbms=DatabaseType ','
		port=EInt ','
		username=EString ','
		password=EString ','
		dataDirectory=EString
	')';

File returns File:
	name=EString
	'('
		path=EString
	')';

Computer returns Computer:
	'Computer' name=EString
	'('
		os=OSType ','
		ramMemory=EInt ','
		storageMemory=EInt ','
		cpuNumber=EInt '-' cpuCoresNumber=EInt ','
		cpuFrequency=EInt ','
		username=EString ','
		password=EString
	')' 
	'{'
		'networkInterfaces' computerNetworkInterfaces+=[NetworkInterface|EString] (computerNetworkInterfaces+=[NetworkInterface|EString])* ';' 
		(computerServices+=Service ';' (computerServices+=Service ';')*)?
		(deployment=DockerDeployment ';')?
	'}';

DockerDeployment returns DockerDeployment:
	'Docker' name=EString
	'('
		directory=EString
	')' 
	'{'
		deploymentContainers+=Container ';' (deploymentContainers+=Container ';')*
	'}'; 

Network returns Network:
	'network' name=EString
	'('
		prefix=EString ','
		mask=EString ','
		gateway=EString ','
		domainName=EString
	')'
	'{'
		networkInterfaces+=NetworkInterface ';' (networkInterfaces+=NetworkInterface ';')* 
	'}';

Container returns Container:
	name=EString
	'('
		containerNetworkInterface=[NetworkInterface|EString]
	')'
	'{'
		containerServices+=Service ';' (containerServices+=Service ';')*
	'}' ;

NetworkInterface returns NetworkInterface:
	'interface' name=EString
	'('
		ipAddress=EString
	')';

WebServer returns WebServer:
	name=EString
	'('
		type=WebServerType ','
		port=EInt
		(',' proxy+=[DataSource|EString] (',' proxy+=[DataSource|EString])*)?
	')';

CalendarScale returns CalendarScale:
	'scale' name=EString
	'('
		'[' factors+=ELong periods+=Period (',' factors+=ELong periods+=Period)* ']'
	')';

FactorScale returns FactorScale:
	'scale' name=EString
	'('
		factor=EInt ','
		zoomsNumber=EInt
	')';


enum MeasurementDataUnit returns MeasurementDataUnit:
				Celsius = 'Celsius' | Meter = 'Meter' | MeterPerSecond = 'MeterPerSecond' | Bar = 'Bar' | Liter = 'Liter' | Gram = 'Gram' | Radian = 'Radian' | None = 'None';

enum Period returns Period:
				Millisecond = 'Millisecond' | Second = 'Second' | Minute = 'Minute' | Hour = 'Hour' | Day = 'Day' | Month = 'Month' | Year = 'Year';

enum OSType returns OSType:
				Linux = 'Linux' | Windows = 'Windows' | MacOS = 'MacOS';

enum DatabaseType returns DatabaseType:
				TimeScaleDB = 'TimeScaleDB' | InfluxDB = 'InfluxDB';

enum UserPolicy returns UserPolicy:
				NavigationDirections = 'NavigationDirections';

enum WebServerType returns WebServerType:
				GeoServer = 'GeoServer' | Apache = 'Apache';


ELong returns ecore::ELong:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;