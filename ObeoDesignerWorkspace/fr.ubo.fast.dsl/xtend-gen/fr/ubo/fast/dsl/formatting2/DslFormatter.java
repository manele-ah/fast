/**
 * generated by Xtext 2.14.0
 */
package fr.ubo.fast.dsl.formatting2;

import com.google.inject.Inject;
import fr.ubo.fast.Data;
import fr.ubo.fast.Platform;
import fr.ubo.fast.Sensor;
import fr.ubo.fast.TimeSeries;
import fr.ubo.fast.TimeSeriesFramework;
import fr.ubo.fast.VisualizationClient;
import fr.ubo.fast.dsl.services.DslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DslGrammarAccess _dslGrammarAccess;
  
  protected void _format(final TimeSeriesFramework timeSeriesFramework, @Extension final IFormattableDocument document) {
    document.<Platform>format(timeSeriesFramework.getPlatform());
    document.<Data>format(timeSeriesFramework.getData());
    EList<VisualizationClient> _clients = timeSeriesFramework.getClients();
    for (final VisualizationClient visualizationClient : _clients) {
      document.<VisualizationClient>format(visualizationClient);
    }
  }
  
  protected void _format(final Data data, @Extension final IFormattableDocument document) {
    EList<Sensor> _sensorsData = data.getSensorsData();
    for (final Sensor sensor : _sensorsData) {
      document.<Sensor>format(sensor);
    }
    EList<TimeSeries> _timeSeriesData = data.getTimeSeriesData();
    for (final TimeSeries timeSeries : _timeSeriesData) {
      document.<TimeSeries>format(timeSeries);
    }
  }
  
  public void format(final Object data, final IFormattableDocument document) {
    if (data instanceof XtextResource) {
      _format((XtextResource)data, document);
      return;
    } else if (data instanceof Data) {
      _format((Data)data, document);
      return;
    } else if (data instanceof TimeSeriesFramework) {
      _format((TimeSeriesFramework)data, document);
      return;
    } else if (data instanceof EObject) {
      _format((EObject)data, document);
      return;
    } else if (data == null) {
      _format((Void)null, document);
      return;
    } else if (data != null) {
      _format(data, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(data, document).toString());
    }
  }
}
