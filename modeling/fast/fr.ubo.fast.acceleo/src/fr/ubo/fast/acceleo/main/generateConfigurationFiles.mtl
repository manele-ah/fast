[comment encoding = UTF-8 /]
[module generateConfigurationFiles('http://fr.ubo.fast')]

[template public generateConfigurationFiles(root : TimeSeriesFramework)]
[comment @main/]
[generateServerConfigurationFile(root)/]
[generateClientConfigurationFile(root)/]
[generateDockerConfigurationFile(root)/]
[generateTimeScaleEnvironmentFile(root)/]
[generateWebServerDataProviderConfigurationFile(root)/]
[generateWebServerConfigurationFile(root)/]
[generateVisualizationToolConfigurationFile(root)/]
[/template]

[template public generateServerConfigurationFile(root : TimeSeriesFramework)]
[for (computer : Computer | root.architecture.computers)]
[if (not (computer.deployment.oclIsUndefined()))]
[file ('docker/'.concat(computer.name.toLowerCase()).concat('_server.properties'), true, 'UTF-8')]
SERVER_USERNAME=[computer.username/]
SERVER_PASSWORD=[computer.password/]
SERVER_HOSTNAME=[computer.computerInterfaces.ipAddress/]
[/file]
[/if]
[/for]
[/template]

[template public generateClientConfigurationFile(root : TimeSeriesFramework)]
[for (client : VisualizationClient | root.clients)]
[if (client.oclIsTypeOf(MinMaxVisualizationClient))]
[file ('visualization_tool/'.concat(client.oclAsType(MinMaxVisualizationClient).name.toLowerCase()).concat('_client.properties'), false, 'UTF-8')]
CLIENT_USERNAME=[client.oclAsType(MinMaxVisualizationClient).clientComputer.username/]
CLIENT_PASSWORD=[client.oclAsType(MinMaxVisualizationClient).clientComputer.password/]
CLIENT_HOSTNAME=[client.oclAsType(MinMaxVisualizationClient).clientComputer.computerInterfaces.ipAddress/]
[/file]
[/if]
[/for]
[/template]

[template public generateDockerConfigurationFile(root : TimeSeriesFramework)]
[for (computer : Computer | root.architecture.computers)]
[if (not (computer.deployment.oclIsUndefined()))]
[let deployment : DockerDeployment = computer.deployment]
[file ('docker/'.concat(computer.name.toLowerCase()).concat('_docker.env'), true, 'UTF-8')]
DOCKER_DIRECTORY=[deployment.directory/]
[/file]
[for (service : Service | deployment.containers.services)]
[if (service.oclIsTypeOf(Database))]
[if (service.oclAsType(Database).dbms = DatabaseType::TIME_SCALE_DB)]
[file ('docker/'.concat(computer.name.toLowerCase()).concat('_docker.env'), true, 'UTF-8')]
DATA_DIRECTORY=[service.oclAsType(Database).dataDirectory/]
TIME_SCALE_DB_PORT=[service.oclAsType(Database).port/]
TIME_SCALE_DB_CONTAINER_NAME=[service.oclAsType(Database).eContainer().oclAsType(Container).name/]
[/file]
[/if]
[elseif (service.oclIsTypeOf(WebServer))]
[file ('docker/'.concat(computer.name.toLowerCase()).concat('_docker.env'), true, 'UTF-8')]
WEB_SERVER_PORT=[service.oclAsType(WebServer).port/]
WEB_SERVER_CONTAINER_NAME=[service.oclAsType(WebServer).eContainer().oclAsType(Container).name/]
[/file]
[/if]
[/for]
[/let]
[/if]
[/for]
[/template]

[template public generateTimeScaleEnvironmentFile(root : TimeSeriesFramework)]
[for (data_source : DataSource | root.observationPlatform.sensors.measures.produces.timeSeriesDataSource)]
[if (data_source.oclIsTypeOf(Database))]
[if (data_source.oclAsType(Database).dbms = DatabaseType::TIME_SCALE_DB)]
[file ('time_scale_db/'.concat(data_source.oclAsType(Database).name.toLowerCase()).concat('_database.env'), false, 'UTF-8')]
POSTGRES_USERNAME=[data_source.oclAsType(Database).username/]
POSTGRES_PASSWORD=[data_source.oclAsType(Database).password/]
POSTGRES_DB=[data_source.oclAsType(Database).name/]
[/file]
[/if]
[/if]
[/for]
[/template]

[template public generateWebServerDataProviderConfigurationFile(root : TimeSeriesFramework)]
[for (computer : Computer | root.architecture.computers)]
[if (not (computer.deployment.oclIsUndefined()))]
[for (service : Service | computer.deployment.containers.services)]
[if (service.oclIsTypeOf(WebServer))]
[for (data_source : DataSource | service.oclAsType(WebServer).proxy)]
[if (data_source.oclIsTypeOf(Database))]
[if (data_source.oclAsType(Database).dbms = DatabaseType::TIME_SCALE_DB)]
[file ('web_server/'.concat(data_source.oclAsType(Database).name.toLowerCase()).concat('_data_provider_database.properties'), false, 'UTF-8')]
DBMS=postgresql
DATABASE_NAME=[data_source.oclAsType(Database).name/]
DATABASE_HOSTNAME=[data_source.eContainer().oclAsType(Container).name/]
DATABASE_PORT=5432
DATABASE_USERNAME=[data_source.oclAsType(Database).username/]
DATABASE_PASSWORD=[data_source.oclAsType(Database).password/]
DATABASE_FETCH_SIZE=10000
[/file]
[/if]
[/if]
[/for]
[/if]
[/for]
[/if]
[/for]
[/template]

[template public generateWebServerConfigurationFile(root : TimeSeriesFramework)]
[for (computer : Computer | root.architecture.computers)]
[if (not (computer.deployment.oclIsUndefined()))]
[for (service : Service | computer.deployment.containers.services)]
[if (service.oclIsTypeOf(WebServer))]
[file ('web_server/'.concat(service.name.toLowerCase()).concat('_web_server.properties'), false, 'UTF-8')]
WEB_SERVER_TYPE=[service.oclAsType(WebServer).type/]
WEB_SERVER_HOSTNAME=[service.eContainer().oclAsType(Container).containerInterface.ipAddress/]
WEB_SERVER_PORT=[service.oclAsType(WebServer).port/]
[/file]
[/if]
[/for]
[/if]
[/for]
[/template]



[template public generateVisualizationToolConfigurationFile(root : TimeSeriesFramework)]
[for (client : VisualizationClient | root.clients)]
[if (client.oclIsTypeOf(MinMaxVisualizationClient))]
[file ('visualization_tool/'.concat(client.oclAsType(MinMaxVisualizationClient).name.toLowerCase()).concat('_tool.properties'), false, 'UTF-8')]
TIME_SERIES_ID=[client.oclAsType(MinMaxVisualizationClient).selectedTimeSeries.id/]
CHART_HEIGHT=[client.oclAsType(MinMaxVisualizationClient).chartHeight/]
CHART_WIDTH=[client.oclAsType(MinMaxVisualizationClient).chartWidth/]
AXIS_FACTOR=[client.oclAsType(MinMaxVisualizationClient).axisFactor/]
USER_TIME=[client.oclAsType(MinMaxVisualizationClient).userTime/]
PING_TIME=[client.oclAsType(MinMaxVisualizationClient).pingTime/]
RAW_DATA_THRESHOLD=[client.oclAsType(MinMaxVisualizationClient).rawDataThreshold/]
PRE_COMPUTED_DATA_THRESHOLD=[client.oclAsType(MinMaxVisualizationClient).preComputedDataThreshold/]
[if (client.oclAsType(MinMaxVisualizationClient).clientScale.oclIsTypeOf(FactorScale))]
SCALE_TYPE=FactorScale
SCALE_FACTOR=[client.oclAsType(MinMaxVisualizationClient).clientScale.oclAsType(FactorScale).factor/]
SCALE_ZOOMS_NUMBER=[client.oclAsType(MinMaxVisualizationClient).clientScale.oclAsType(FactorScale).zoomsNumber/]
[elseif (client.oclAsType(MinMaxVisualizationClient).clientScale.oclIsTypeOf(CalendarScale))]
SCALE_TYPE=CalendarScale
SCALE_FACTORS=[client.oclAsType(MinMaxVisualizationClient).clientScale.oclAsType(CalendarScale).factors->sep(',').toString()/]
SCALE_PERIODS=[client.oclAsType(MinMaxVisualizationClient).clientScale.oclAsType(CalendarScale).periods->sep(',').toString()/]
[/if]
[/file]
[/if]
[/for]
[/template]